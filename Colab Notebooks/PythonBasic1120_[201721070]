{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"PythonBasic1120_[201721070]","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNnIDGiimSmqGdPazcgtNQ8"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"is3YbNIQWqpI"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IP3opFG0X7Gw"},"source":["이름 짓는 것은 방대한 양의 아이템을 다룰 때 아이템의 유용성을 높인다.\n","\n","###이름 짓는 가이드 라인\n","\n",": 유일해야 한다.\n","\n",": 하나의 아이템이 둘 이상의 이름을 갖는 것을 지양하라\n","\n",": 이름은 서술적이어야 한다. 이름만 봐도 알 수 있게\n","\n","\n","\n","###웹주소는 URL URLI로 부른다.\n","\n","  웹주소는 유일함\n","\n","  이름을 하나만 갖고 있다\n","\n","  설명적이다\n","\n","  위치를 알 수 있다.\n","\n","###자료구조\n","\n","####리스트\n","+ 인덱싱 : 아이템마다 유일한 번호를 붙이는 것\n","+ : 인덱스 숫자에 의해 식별됨\n","+ : 대괄호를 사용하여 리스트의 아이템을 표현함\n","- 리스트는 테이블(메모리처럼)처럼 표시되지만 실제로는 원형 하드 디스크 안에서 원형으로 저장됨 \n","+ 메모리 : 각 주소, 인덱스로 표현된다.\n","\n","#### 자료의 저장 단위\n","+ 워드 : 컴퓨터에 저장되는 가장 작은 단위. 8, 32, 64비트 컴퓨터마다 다름\n","+ 트랙 : 디스크를 구성하는 동심의 원. 트랙을 따라가며 저장된 자료들을 읽음.\n","+ 섹터 : 트랙에서 파일처럼 나눠진 것. 트랙을 구성하는단위\n","\n","저장방법 앵커를 잡고 순차로 돌아가며 저장한다\n","\n","### 두배열 저장\n","+ 두 배여을 메모리에 저장하기. 연속으로 저장하고 각각 기준 주소를 따로 저장해서 찾을 수 있다. 메모라 상의 위치(앵커)\n","+ 아이템에 접근하려면 기준주소 + 인덱스에 의해 아이템을 접근\n","+ 배열의 단점 : 실행 중 확장 및 축소가 안됨. 한번 만들면 끝까지 있는 대로 써야함.\n","\n","### 배열 아이템 접근\n","+ 첫 아이템 - paintings[1] 호출\n","\n","### 0 인덱싱\n","+ i-1을 안하려고 그냥 첫 시작을 0부터함. 우리가 평소에 쓰던거.\n","\n","### 배열 자료 삭제\n","+ 삭제하고 그 아이템 다음 위치한 모든 아이템을 하나씩 옮김. 삭제에 시간이 많이 걸림.\n","\n","### 배열 자료 삽입\n","+ 다 옮기고 삽입. 시간이 많이 걸림\n","\n","### 해결법 : 연결 리스트\n","+ 메모리에 안에 흩어져 있는 데이터를 사슬처럼 연결하여 리스트 구성하는!\n","+ 한 노드에 자료내용과 주소가 함께 있음.\n","+ 확장할때 마지막 리스트에 다음 주소만 지정해주면 되서 쉬움. 배열보다 삭제도 ㅇㅇ\n","#### 단점\n","+ 앵커와 인덱스 만으로 직접 접근이 안됨. 순차적으로 이동해서 찾아아햐마\n","#### 장점\n","+ 삭제 삽입이 용이함..\n","\n","## 그래프\n","+ 정점들과 정점을 잇는 간선들의 집합 G=(V,E0\n","+ 유향 그래프 : 엣지가 방향을 가짐. 방향을 가진 간선을 아크라함.\n","+ V = {a,b,c,d) E ={(a,b)...} G={V+E}\n","+ tuple -> (a,b) 두개로 묶여있은거\n","+ 엄청 많이 쓰임. 실제 세계의 대부분의 상황들은 객체와 객체들간의 관계로 추상화 가능.\n","\n","###용어\n","+ 인접성 : 정점 사이에 간선이있다\n","+ 루프 : 시작과 끝이 일치\n","+ 입력차수 : 들어오는 갯수\n","+ 출력차수 : 아웃디그리 나가는 갯수\n","+ 위수 : 정점의 갯수\n","+ 크기 : 엣지의 갯수\n","+ 경로 : 작은 그래프도 많다\n","+ 경로 길이 : 결로에 있는 엣지의 숫자.\n","+ 사이클 : 삥돌서 오는거 길이가 0보다 크며 처음과 마지막 정점이 일치하는 것.\n","\n","### 그래프 저장\n","+ E, 3, 1, 20, 25 -> E버택스에서 출력차수 3개고 1로가고 20, 25로 간다.\n","\n","## 트리\n","### 계층\n","+ 요소들이 레벨 별로 배치되도록 하는 방법\n","+ 예 : 구문해석 트리. : 언어 문법을모델링하고 언어 요소들의 의미를 명확하게 문법을 표현해 주는 도구\n","+ 그래프의 한 형태.\n","+ 특성 : 입력차수가 0인 정점은 하나 (루트)\n","+ : 나가는 건 많을 수 있는데 입력은 1개.\n","+ : 루트에서 모두에게 갈 수 있음\n","+ 리프는 출력 차수가 0임"]},{"cell_type":"code","metadata":{"id":"Epo6RJRma6pf"},"source":[""],"execution_count":null,"outputs":[]}]}